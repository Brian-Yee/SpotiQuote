# https://github.com/AntJanus/programmers-proverbs
Dance like nobody is watching, code like everybody is.
A deployed MVP is worth two prototyped.
When you reach wizened engineer-level, there are at least a hundred wizened engineers above you.
A/B Test twice, deploy changes once.
Don't commit on master when drunk.
Sleep on a force push.
A git pull a day, keeps the doctor away.
Sometimes you have to cut legacy support to allow the new product to bloom.
More hours worked, more commits made. Mostly reverts and bug-causing features.
Even a wizened engineer will drop production DB.
Scope creep makes a mountain.
A hundred programmers won't make a two-year project in a week.
Facebook wasn't built in a day.
"Just ship" is no substitute for design.
Today's fashion is tomorrow's legacy.
Learning obscure and strange languages, yields better understanding and broader horizons.
The better job you do, the easier others discount the level of difficulty.
Testing is easier than debugging.
Finish a product in a day, and people will expect a new product every day. Teach people about proper development cycles, and your company will flourish.
Customers are the best testers.
Absence is beauty, in error logs.
Eternal sunshine of the stateless mind.
Laziness is your best friend. Never do twice what you can automate once.
Good test coverage + automated workflows = quiet cell phones and better sleep.
The best code is no code at all.
The best request is the one you don't make.
If a system works perfectly, no one will care what is inside it. Once it breaks, systems design and architecture decides your fate.
Leave architecture for applications that require long-term support.
Architecture and design are preparations for problems and changes, not a key to runtime.
Without a prototype, don't build a final product.
Without boilerplate, there's no speedy development.
Code frustration is a bad advisor for a refactor.
The more technology you learn, the more you realize how little you know.
An early BETA launch will teach you more than a delayed promise.
All applications are pretty when your screen is off.
Do not pick a framework for its demo page, instead pick it for its code.
You cannot set a web standard alone.
A poor programmer blames the language.
The code's writin' but ain't nobody programming.
Ma√±ana often has the most tickets.
Never optimize before measuring
Think about your dance moves when drunk, next time you try to code with some beers on your count.
What happens in Git stays in Git
Simpler code has less bugs.
Lock up your dependency versions and other valuables.
Quantity of attempts often yields quality at the end. Commitment to refactoring legacy code yields better quality yet.
Accept that some days you're the QA and some days you're the one fixing bugs.
Give a programmer the correct code and he can do his work for a day. Teach a programmer to debug and he can do his work for a lifetime - by Chirag Gude
Debugging becomes significantly easier if you first admit that you are the problem.
Figure out your data structures, and the code will follow.
One thing should never do more than one thing.
Success from a final version is a lie, there is only iteration. Through iteration, we gain better products. Through better products, we gain traction. Through traction, we gain success. Through success, misguided tech specs are broken. The development cycle shall free us.
An open source developer does not act for personal fame.
Public code review forces one to better oneself. It forces better practices, smarter solutions, growth as a developer... or being broken.
Testing covers not testing.
The most attractive pull requests are the ones wearing a lot of red.
Coding styleguides without peer code reviews are like running a country on voluntary taxes
Deploying an unmonitored app is like going on a roadtrip without a gas gauge.
Learn a programming language, become a new developer.
Some old code never refactors, and breaks at the slightest change.
A developer will spot a peer from far away
A developer that codes until burnout, lives without a mind.
A marketer is not a QA, a developer does not advertise.
A soft spoken developer will see his warnings of technical debt unheeded, and will suffer the blame.
A well spoken developer can be hired hastily but at the last minute fail an easy test.
One can self-learn the art of code but do not assume other crafts suffer of such low bar of entry.
Find ease in your code: Code difficult to read and understand is code destined to be in troubled legacy.
Collaborating on open source projects can bring about friendship and community just as it can create factions and flame wars.
Refactor or rewrite, there is no patching unmaintainable legacy code
If you stop learning now and take the easy path, you will find yourself stuck in legacy software forever.
A beautiful product which is pleasing to non-paying users is good only for frightening investors when it runs out of funding.
A foreach loop avoided is a CPU cycle earned.
You cannot prevent managers from asking too much of you, but you can prevent them from getting used to it.
Your code might be perfect but you aren't
Any sufficiently complex app architecture is indistinguishable from spaghetti code.
Writing requirements based code and walking on water are both relatively easy to do when frozen.
It takes twice as much intelligence to debug than to program, therefore you peer review because you can never truly be smart enough to debug your own code.
Hofstadter's Law will tell you to always add more time than you think you need to a project because it will take longer, even when you take into account Hofstadter's Law.
Long lasting code is written only when you pretend that it will be peer reviewed or maintained by a violent psycopath who knows where you live.
Small bug becomes a huge problem.
Commiting is the only command I know, Commiting on you.
No one who codes before dawn 360 days a year fails to make his startup profitable
There is no test without first a failure
A line of testing is worth more than a module of code
Don't put all your logic in one method basket
As you code so shall you also deploy
Diff before you Push
When the only tool you have is Rails, everything looks like Ruby
Careful that Ignoring a PR doesn't get construed as Approval
An interview at the right price is worth two at Google
With commit and deploy access comes great responsibility
When aruging with a foolish and conceded programmer, first make sure that the other person isn't doing the exact same thing
Don't enter an architecture argument without knowing design patterns first
Anger and stubborness make bad allies in code review
Not all those that prototype and test ideas are lost.
Each new commit holds new chances, new beginnings
Commit or do not commit, there is no try

# Akin's Law of Spacecraft Design

Engineering is done with numbers. Analysis without numbers is only an opinion.
To design a spacecraft right takes an infinite amount of effort. This is why it's a good idea to design them to operate when some things are wrong .
Design is an iterative process. The necessary number of iterations is one more than the number you have currently done. This is true at any point in time.
Your best design efforts will inevitably wind up being useless in the final design. Learn to live with the disappointment.
(Miller's Law)... Three points determine a curve.
(Mar's Law)... Everything is linear if plotted log-log with a fat magic marker.
At the start of any design effort, the person who most wants to be team leader is least likely to be capable of it.
In nature, the optimum is almost always in the middle somewhere. Distrust assertions that the optimum is at an extreme point.
Not having all the information you need is never a satisfactory excuse for not starting the analysis.
When in doubt, estimate. In an emergency, guess. But be sure to go back and clean up the mess when the real numbers come along.
Sometimes, the fastest way to get to the end is to throw everything out and start over.
There is never a single right solution. There are always multiple wrong ones, though.
Design is based on requirements. There's no justification for designing something one bit "better" than the requirements dictate.
(Edison's Law)... "Better" is the enemy of "good".
(Shea's Law)... The ability to improve a design occurs primarily at the interfaces. This is also the prime location for screwing it up.
The previous people who did a similar analysis did not have a direct pipeline to the wisdom of the ages. There is therefore no reason to believe their analysis over yours. There is especially no reason to present their analysis as yours.
The fact that an analysis appears in print has no relationship to the likelihood of its being correct.
Past experience is excellent for providing a reality check. Too much reality can doom an otherwise worthwhile design, though.
The odds are greatly against you being immensely smarter than everyone else in the field. If your analysis says your terminal velocity is twice the speed of light, you may have invented warp drive, but the chances are a lot better that you've screwed up.
A bad design with a good presentation is doomed eventually. A good design with a bad presentation is doomed immediately.
(Larrabee's Law)... Half of everything you hear in a classroom is crap. Education is figuring out which half is which.
When in doubt, document. (Documentation requirements will reach a maximum shortly after the termination of a program.)...
The schedule you develop will seem like a complete work of fiction up until the time your customer fires you for not meeting it.
It's called a "Work Breakdown Structure" because the Work remaining will grow until you have a Breakdown, unless you enforce some Structure on it.
(Bowden's Law)... Following a testing failure, it's always possible to refine the analysis to show that you really had negative margins all along.
(Montemerlo's Law)... Don't do nuthin' dumb.
(Varsi's Law)... Schedules only move in one direction.
(Ranger's Law)... There ain't no such thing as a free launch.
(von Tiesenhausen's Law of Program Management)... To get an accurate estimate of final program requirements, multiply the initial time estimates by pi, and slide the decimal point on the cost estimates one place to the right.
(von Tiesenhausen's Law of Engineering Design)... If you want to have a maximum effect on the design of a new engineering system, learn to draw. Engineers always wind up designing the vehicle to look like the initial artist's concept.
(Mo's Law of Evolutionary Development)... You can't get to the moon by climbing successively taller trees.
(Atkin's Law of Demonstrations)... When the hardware is working perfectly, the really important visitors don't show up.
(Patton's Law of Program Planning)... A good plan violently executed now is better than a perfect plan next week.
(Roosevelt's Law of Task Planning)... Do what you can, where you are, with what you have.
(de Saint-Exupery's Law of Design)... A designer knows that he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away.
Any run-of-the-mill engineer can design something which is elegant. A good engineer designs systems to be efficient. A great engineer designs them to be effective.
(Henshaw's Law)... One key to success in a mission is establishing clear lines of blame.
Capabilities drive requirements, regardless of what the systems engineering textbooks say.
Any exploration program which "just happens" to include a new launch vehicle is, de facto, a launch vehicle program.
(alternate formulation)... The three keys to keeping a new human space program affordable and on schedule: No new launch vehicles.
(McBryan's Law)... You can't make it better until you make it work.
There's never enough time to do it right, but somehow, there's always enough time to do it over.
is a completely unforgiving environment. If you screw up the engineering, somebody dies (and there's no partial credit because most of the analysis was right...)...
